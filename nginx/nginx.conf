# nginx config for doug's benchmarks. Use like this:
# ../nginx-1.7.4/objs/nginx -p `pwd` -c nginx.conf

user doug doug;
error_log /home/doug/nginx/logs/error.log crit;
 
# Defines the number of worker processes.
# The optimal value depends on many factors including (but not limited to) the
# number of CPU cores, the number of hard disk drives that store data, and load
# pattern. When one is in doubt, setting it to the number of available CPU
# cores would be a good start (the value “auto” will try to autodetect it).
worker_processes auto;
 
# Number of file descriptors used for Nginx. This is set in the OS with 'ulimit -n 200000'
# or using /etc/security/limits.conf
worker_rlimit_nofile 200000;
 
events {
    # use epoll # should be automatically selected

    # Sets the maximum number of simultaneous connections that can be opened by a worker process.
    # It should be kept in mind that this number includes all connections (e.g.
    # connections with proxied servers, among others), not only connections
    # with clients. Another consideration is that the actual number of
    # simultaneous connections cannot exceed the current limit on the maximum
    # number of open files, which can be changed by worker_rlimit_nofile.
    worker_connections 4000;

    # If multi_accept is disabled, a worker process will accept one new connection
    # at a time. Otherwise, a worker process will accept all new connections at a
    # time.
    multi_accept on;
} 
 



http {

    client_body_timeout 10;
    keepalive_requests 100000;
    keepalive_timeout 30;
    reset_timedout_connection on;
    send_timeout 2;
    sendfile on; 
    tcp_nodelay on; 
    tcp_nopush on;
    access_log off;

    # Configures a cache that can store:
    # 
    # * open file descriptors, their sizes and modification times;
    # * information on existence of directories;
    # * file lookup errors, such as “file not found”, “no read permission”, and so on.
    open_file_cache off;
    open_file_cache_errors off;

    default_type  application/octet-stream;
 
	server {
        listen       8080;

        location / {
            root   html;
            index  index.html index.htm;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

	}
}
